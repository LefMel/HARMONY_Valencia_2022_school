library(runjags)
n <- 4072
y <- 1220
tp <- list(chain1=0.05, chain2=0.95)
Se <- list(chain1=0.05, chain2=0.95)
Sp <- list(chain1=0.05, chain2=0.95)
# 6.	 Run the model
results <- run.jags('tp_model.bug', n.chains=2, burnin=5000, sample=10000)
# 7.	 Plot and view the results
plot(results)
results
summary(results)
pop_1 = matrix(nrow=3,ncol=3)
rownames(pop_1) = c("Mantoux_Test_Pos", "Mantoux_Test_Neg", "Total")
colnames(pop_1) = c("Tine_Test_Pos", "Tine_Test_Neg", "Total")
pop_1[1,1] = 14
pop_1[1,2] = 4
pop_1[2,1] = 9
pop_1[2,2] = 528
#Total rows and columns
pop_1[1,3] = pop_1[1,1] + pop_1[1,2]
pop_1[2,3] = pop_1[2,1] + pop_1[2,2]
pop_1[3,1] = pop_1[1,1] + pop_1[2,1]
pop_1[3,2] = pop_1[1,2] + pop_1[2,2]
N_1 = sum(pop_1[1,1] + pop_1[1,2] + pop_1[2,1] + pop_1[2,2])
pop_1[3,3] = N_1
pop_1
# 7.	Run the model
results <- run.jags("hw_blca.bug", n.chains=2, burnin=5000, sample=10000)
# 4.	Attach the “runjags” package
library(runjags)
Population_1 <- as.numeric(pop_1[1:2,1:2])
Population_2 <- as.numeric(pop_2[1:2,1:2])
prev <- list(chain1=c(0.05,0.99), chain2=c(0.95,0.05))
se <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
sp <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
results <- run.jags("hw_blca.bug", n.chains=2, burnin=5000, sample=10000)
pop_2 = matrix(nrow=3,ncol=3)
rownames(pop_2) = c("Mantoux_Test_Pos", "Mantoux_Test_Neg", "Total")
colnames(pop_2) = c("Tine_Test_Pos", "Tine_Test_Neg", "Total")
pop_2[1,1] = 887
pop_2[1,2] = 31
pop_2[2,1] = 37
pop_2[2,2] = 367
#Total rows and columns
pop_2[1,3] = pop_2[1,1] + pop_2[1,2]
pop_2[2,3] = pop_2[2,1] + pop_2[2,2]
pop_2[3,1] = pop_2[1,1] + pop_2[2,1]
pop_2[3,2] = pop_2[1,2] + pop_2[2,2]
N_2 = sum(pop_2[1,1] + pop_2[1,2] + pop_2[2,1] + pop_2[2,2])
pop_2[3,3] = N_2
pop_2
library(runjags)
# 5.	Specify the data in R environment
Population_1 <- as.numeric(pop_1[1:2,1:2])
Population_2 <- as.numeric(pop_2[1:2,1:2])
# 6.	Define the initial values data for the MCMC chains:
prev <- list(chain1=c(0.05,0.99), chain2=c(0.95,0.05))
se <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
sp <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
results <- run.jags("hw_blca.bug", n.chains=2, burnin=5000, sample=10000)
summary(results)
pt <- plot(results)
pt$`prev[1].plot1`
pt$`prev[1].plot3`
print(pt[["prev[1].plot1"]])
print(pt[["se[1].plot1"]])
Cross_Classified = read.csv("ex3.csv", sep=";")
View(Cross_Classified)
Populations <- 5
TotalTests <- 2
# 3.	Attach the “runjags” package
library(runjags)
prev <- list(chain1=c(0.1, 0.1, 0.1, 0.9, 0.9), chain2=c(0.9, 0.9, 0.9, 0.1, 0.1))
se <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
sp <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
results <- run.jags("hw2_blca.bug", n.chains=2, burnin=5000, sample=10000)
str(Cross_Classified)
as.numeric(Cross_Classified)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";")
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv")
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";")
View(Cross_Classified)
Cross_Classified[1]
Cross_Classified[1,1]
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";", row.names = TRUE)
View(Cross_Classified)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";", row.names == TRUE)
?read.csv
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";", header = TRUE)
View(Cross_Classified)
Cross_Classified=Cross_Classified[,2:4]
View(Cross_Classified)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";", header=TRUE)
View(Cross_Classified)
Cross_Classified=Cross_Classified[,2:6]
View(pop_1)
View(Cross_Classified)
results <- run.jags("hw2_blca.bug", n.chains=2, burnin=5000, sample=10000)
Cross_Classified[2,1]
Cross_Classified[5,1]
str(Cross_Classified)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";", header=TRUE)
Cross_Classified=Cross_Classified[-1,2:6]
View(Cross_Classified)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";", header=TRUE)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3", sep=";", header=TRUE)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3", sep=";", header=TRUE)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";", header=TRUE)
list.files()
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.numbers", sep=";", header=TRUE)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";", header=TRUE)
Cross_Classified = read.csv("ex3_final.csv", sep=";", header=TRUE)
View(Cross_Classified)
results <- run.jags("hw2_blca.bug", n.chains=2, burnin=5000, sample=10000)
matrix(Cross_Classified)
as.matrix(Cross_Classified)
str(as.matrix(Cross_Classified))
Cross_Classified = read.csv("ex3_final.csv", sep=";", header=TRUE)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
Cross_Classified = read.csv("ex3.csv", sep=";", header=TRUE)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
data = read.csv("ex3.csv", sep=";", header=TRUE)
Cross_Classified=array(,dim=c(4,5))
View(Cross_Classified)
Cross_Classified[1:4,1] = data[1:4,1]
View(Cross_Classified)
Cross_Classified[1:4,1] = data[1:4,2]
Cross_Classified[1:4,2] = data[1:4,3]
Cross_Classified[1:4,3] = data[1:4,4]
Cross_Classified[1:4,4] = data[1:4,5]
Cross_Classified[1:4,5] = data[1:4,6]
View(Cross_Classified)
Cross_Classified = as.numeric(Cross_Classified)
results <- run.jags("hw2_blca.bug", n.chains=2, burnin=5000, sample=10000)
# 1.	Encode the table from the Exercise 3 Word document in your R working directory, as a matrix and save it as a variable named Cross_Classified.
# 2nd Option
# Load the ex3.csv file into the working directory
data = read.csv("ex3.csv", sep=";", header=TRUE)
str(data)
Cross_Classified=array(,dim=c(4,5))
Cross_Classified[1:4,1] = data[1:4,2]
Cross_Classified[1:4,2] = data[1:4,3]
Cross_Classified[1:4,3] = data[1:4,4]
Cross_Classified[1:4,4] = data[1:4,5]
Cross_Classified[1:4,5] = data[1:4,6]
View(Cross_Classified)
results <- run.jags("hw2_blca.bug", n.chains=2, burnin=5000, sample=10000)
TotalTests <- array(,dim = (1,5))
TotalTests <- array(,dim = c(1,5))
sum(Cross_Classified[1:4,1]
)
TotalTests[1] <- sum(Cross_Classified[1:4,1])
TotalTests[2] <- sum(Cross_Classified[1:4,2])
TotalTests[3] <- sum(Cross_Classified[1:4,3])
TotalTests[4] <- sum(Cross_Classified[1:4,4])
TotalTests[5] <- sum(Cross_Classified[1:4,5])
TotalTests
TotalTests[1]
TotalTests[2]
results <- run.jags("hw2_blca.bug", n.chains=2, burnin=5000, sample=10000)
TotalTests <- array(,dim = c(1,5))
TotalTests[1] <- sum(Cross_Classified[1:4,1])
TotalTests[2] <- sum(Cross_Classified[1:4,2])
TotalTests[3] <- sum(Cross_Classified[1:4,3])
TotalTests[4] <- sum(Cross_Classified[1:4,4])
TotalTests[5] <- sum(Cross_Classified[1:4,5])
TotalTests
# 4.	Specify the data in R environment
Populations <- 5
prev <- list(chain1=c(0.1, 0.1, 0.1, 0.9, 0.9), chain2=c(0.9, 0.9, 0.9, 0.1, 0.1))
se <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
sp <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
results <- run.jags("hw2_blca.bug", n.chains=2, burnin=5000, sample=10000)
dim(TotalTests)
TotalTests[2]
TotalTests[3]
TotalTests[3,1]
TotalTests[1,3]
as.numetic(TotalTests)
as.numeric(TotalTests)
TotalTests = as.numeric(TotalTests)
results <- run.jags("hw2_blca.bug", n.chains=2, burnin=5000, sample=10000)
summary(results)
pt <- plot(results)
pt$`prev[1].plot1`
pt$`prev[1].plot3`
View(Cross_Classified)
# Let's apply the model to the first 3 populations - 2 test | 3 population setting
# The model is the same, we need to adjust the data only
Cross_Classified = Cross_Classified[1:4,1:3]
View(Cross_Classified)
View(Cross_Classified)
TotalTests[1] <- sum(Cross_Classified[1:4,1])
TotalTests[2] <- sum(Cross_Classified[1:4,2])
TotalTests[3] <- sum(Cross_Classified[1:4,3])
TotalTests = as.numeric(TotalTests)
Populations <- 3
TotalTests <- array(,dim = c(1,3))
TotalTests[1] <- sum(Cross_Classified[1:4,1])
TotalTests[2] <- sum(Cross_Classified[1:4,2])
TotalTests[3] <- sum(Cross_Classified[1:4,3])
TotalTests = as.numeric(TotalTests)
prev <- list(chain1=c(0.1, 0.1, 0.9), chain2=c(0.9, 0.9, 0.1))
se <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
sp <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
results <- run.jags("hw2_blca.bug", n.chains=2, burnin=5000, sample=10000)
summary(results)
pt <- plot(results)
pt$`prev[1].plot1`
pt$`prev[1].plot3`
alpha <- c(1,1) # Dirichlet parameter
S <- c(-1.09,-0.69,-1.26,-0.54,-2.09,-0.76,0.13,-1.86,-0.21,-1.48,-0.02,-0.17,-1.19,-1.51,-0.92,0.21,-1.01,-1.97,-1.02,-0.06,-1.26,-2.34,-0.29,-2.44,-1.03,-1.97,-0.22,-1.45,
-2.53,-2.03,-1.90,-2.27,0.81,0.17,-1.45,-0.56,-0.32,-0.02,-2.03,-2.21,-1.29,-1.31, 0.22,0.17,0.37,-3.06,-0.33,-0.97,0.84,-0.03,-2.66,0.01,-1.39,0.81,-0.45,-0.87,
0.21,0.46,-0.53,-0.29,0.51,-0.56,-0.67,-0.54,-0.51,-0.99,-0.21,-2.04,-1.97,-0.16,
0.43,-1.77,0.19,-1.08,-2.30,-1.66,-0.78,-0.69,-2.41,-2.41,-1.51,-2.53,-0.33,0.20,
-0.24,-2.53,-0.80,-2.12,-2.98,-2.90,-2.66,-2.75,-2.83,-2.83,-2.92,-2.98,-2.88,-2.55,-2.78,-2.80,-2.94,-2.98,-3.02,-2.83,-2.86,-2.98,-2.88,-2.63,-2.94,-2.48,-2.86,-2.88,-2.78,-2.98,-2.80,-2.94,-2.60,-2.63,-2.92,-2.81,-2.62,-2.86,-2.83,-2.81,-2.78,-2.76,-2.63,-1.98,-2.81,-2.28, -2.69,-2.60,-2.31,-2.63,-2.70,-2.88,-2.55,-2.60,-2.45,-2.73,-2.78,-1.81,-2.69,-2.51,-2.72,-2.67,-1.53,-2.78,-2.65,-2.17,-2.36,-2.75,-2.49,-2.50,-2.59,-2.69,-2.20,-2.40,-2.23,-2.12,-2.65,-2.44,-2.67,-2.55,-2.56,-2.23,-2.70,-2.24,-2.44,-1.93,-2.28,-2.72,-2.25,-2.44,-2.66,-2.65,-2.70,-2.55,-2.30,-2.67,-2.73,-2.40,-3.06,-2.92,-3.06,-3.06, -3.02,-2.86,-2.94,-3.00,-2.88,-2.88,-3.08,-2.92,-3.06,-2.90,-2.92,-3.04,-3.10,-2.96, -3.02,-3.08,-2.88,-2.92,-2.96,-3.08,-2.94,-3.00,-3.04,-2.67,-2.98,-3.02,-3.00,-3.04,
-2.44,-3.08,-3.02,-2.98,-2.94,-2.90,-2.47,-3.06,-3.06,-3.04,-1.87,-2.14,-2.45,-2.62,
-2.63,-2.19,-2.54,-2.67,-2.54,-2.27,-2.73,-2.50,-2.60,-2.62,-2.62,-2.40,-2.59,-2.35,
-2.44,-2.48,-2.58,-2.55,-2.75,-2.73,-2.80,-2.49,-2.51,-2.66,-2.60,-2.60,-2.67,-2.43,
-2.73,-2.59,-2.67,-2.49,-2.54,-2.23,-2.49,-2.11,-2.59,-2.41,-2.51,-2.75,-2.81,-2.38,
-2.47,-2.45,-2.75,-2.96,-2.83,-2.98,-2.90,-2.90,-2.92,-2.98,-2.92,-2.60,-2.98,-2.96,
-2.92,-2.94,-2.81,-3.00,-2.54,-2.67,-2.96,-2.83,-2.90,-2.02,-2.70,-2.81,-1.97,-2.69,
-2.30,-2.80,-2.90,-2.67,-2.86,-2.88,-2.75,-2.65,-2.80,-2.73,-2.76,-2.73,-2.78,-2.76,
-2.83,-2.53,-2.85,-2.78,-2.85,-3.08,-3.10,-3.08,-3.08,-3.02,-3.08,-2.80,-2.98,-3.04,
-3.02,-3.04,-3.08,-3.02,-2.86,-2.98,-3.00,-3.08,-3.08,-2.98,-3.06,-3.04,-3.06,-3.02,
-3.02,-3.08,-2.83,-3.08,-3.08,-2.90,-2.98,-3.06,-2.94,-2.98,-3.06,-2.85,-3.02,-3.00,
-3.06,-3.06,-3.08,-2.92,-3.10,-3.04,-3.08,-2.94,-3.10,-3.00,-2.98,-3.06,-2.98,-3.06,
-3.04,-3.08,-2.65,-2.85,-3.00,-3.04,-2.51,-2.85,-2.63,-2.90,-2.56,-2.67,-2.78,-2.65,
-2.67,-2.76,-2.78,-2.50,-2.32,-2.54,-2.56,-2.47,-2.73,-2.44,-2.76,-2.76,-2.54,-2.62,
-2.54,-2.83,-2.65,-2.55,-2.59,-2.75,-2.66,-2.86,-2.69,-2.75,-2.75,-2.72,-2.15,-2.63,
-2.80,-2.63,-2.48,-2.47,-2.34,-2.63,-2.50,-2.36,-2.75,-2.51,-2.30,-2.70,-2.69,-2.65,
-2.40,-2.81,-3.00,-2.83,-2.81,-2.90,-2.86,-2.81,-2.25,-2.88,-3.00,-2.90,-2.81,-2.88,
-2.80,-2.85,-2.98,-2.80,-2.83,-2.63,-2.58,-2.85,-2.76,-2.75,-2.85,-2.86,-2.81,-2.78,
-2.75,-2.69,-2.62,-2.81,-2.92,-2.88,-2.92,-2.85,-2.94,-2.86,-2.96,-2.67,-2.63,-2.83,
-2.81,-2.70,-2.69,-2.90,-2.80,-2.85,-2.67,-2.43,-2.85,-2.86,-2.98,-2.86,-2.94,-2.94,
-2.83)
summary(S)
hist(S)
lambda <- list(chain1=c(-3, 0), chain2=c(-2,-2))
gamma <- list(chain1=c(10, 0.1), chain2=c(30, 5))
results <- run.jags(continuous_test, n.chains = 2)
